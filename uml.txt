@startuml

Class Game << Singleton >>
Game : PlayerData player
Game : LevelManager levelManager
Game : EntityManager entityManager
Game --* PlayerData
Game --* LevelManager
Game --* EntityManager

Class PlayerData <<ScriptableObject>>
PlayerData : FirstPersonCamera camera
PlayerData : FirstPersonMovement movementController
PlayerData : GunInventory guns
PlayerData --* FirstPersonMovement
PlayerData --* FirstPersonCamera 
PlayerData --* GunInventory 

Class FirstPersonMovement <<ScriptableObject>>
FirstPersonMovement : float speed
Class FirstPersonCamera <<ScriptableObject>>
FirstPersonCamera : Camera camera

Class GunInventory <<ScriptableObject>>
GunInventory : Dictionary<KeyCode, GunBuilder> guns
GunInventory : Dictionary<KeyCode, Gun> activeGuns
GunInventory : KeyCode activeGunId
GunInventory --* GunBuilder

Class GunBuilder <<ScriptableObject>>
GunBuilder : float fireRate
GunBuilder : float reloadTime
GunBuilder : IShootStrategy shootStrategy
GunBuilder --* IShootStrategy

Class Gun
Gun : bool canShoot
Gun : Timer fireRateTimer
Gun : Timer reloadTimer
Gun : IShootStrategy shootStrategy
Gun --* IShootStrategy

Interface IShootStrategy
IShootStrategy : Shoot(ShootData data)
IShootStrategy --> ShootData

class RayCastShootStrategy <<ScriptableObject>>
IShootStrategy <|-- RayCastShootStrategy

class MultipleRayCastShootStrategy <<ScriptableObject>>
IShootStrategy <|-- MultipleRayCastShootStrategy

class ProjectileShootStrategy <<ScriptableObject>>
ProjectileShootStrategy : ProjectileBuilder builder
ProjectileShootStrategy --* ProjectileBuilder
IShootStrategy <|-- ProjectileShootStrategy

Class ShootData
ShootData : Vector3 origin
ShootData : Vector3 direction
ShootData : Vector3 force
ShootData : float spread
ShootData : float maxDistance

Class ProjectileBuilder <<ScriptableObject>>
ProjectileBuilder : GameObject baseProjectilePrefab
ProjectileBuilder : Projectile BuildProjectile()
ProjectileBuilder --> Projectile

Class Projectile
Projectile : List<DamageTypeDecorator> damageTypes
Projectile : GameObject body
Projectile --* DamageTypeDecorator

Class DamageTypeDecorator
DamageTypes <-- DamageTypeDecorator

Enum DamageTypes{
Frost
Fire
Dark
Holy
}

Interface IDamager
IDamager : RetrieveDamage()

Class LevelManager <<ScriptableObject>>
LevelManager : int currentLevel
LevelManager : List<LevelData> levels
LevelManager --* LevelData

Class LevelData <<ScriptableObject>>
LevelData : Vector3 playerSpawn
LevelData : Vector3 levelEnd
LevelData : List<LevelDataEntity> entities
LevelData --* LevelDataEntity

Class LevelDataEntity <<ScriptableObject>>
LevelDataEntity : Vector3 position

Class DoorData <<ScriptableObject>>
DoorData : LevelDataEntity KeyData
LevelDataEntity <|-- DoorData 
DoorData --* LevelDataEntity

Class EntityManager
EntityManager : ObjectPool<IEntity> entities
EntityManager : PlayerEntity playerReference
EntityManager --> PlayerEntity
EntityManager --> ObjectPool
EntityManager --* IEntity
note left of EntityManager : Entities are enemies and Npc's,\nmoving living things that shouldnt move when-\nthe PlayerData isnt there.

Class PlayerEntity
PlayerEntity : PlayerData data
PlayerEntity : GameObject body
PlayerEntity --* PlayerData
PlayerEntity --|> IEntity

Interface IEntity
IEntity : Update()
IEntity --|> IPoolable

class ObjectPool<IPoolable>{
List<T> activePool
List<T> inactivePool
}
interface IPoolable{
bool active
void OnEnableObject()
void OnDisableObject()
void DoDie()
}

@enduml
